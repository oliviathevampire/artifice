plugins {
	id 'fabric-loom' version "0.7-SNAPSHOT"
	id 'maven-publish'
	id "com.github.fudge.forgedflowerloom" version "2.0.0"
}

def total_version = "$mod_version+$minecraft_version"
def githubUrl = "https://github.com/$github_repo"

archivesBaseName = mod_id
version = total_version
group = project.maven_group

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

minecraft {}

sourceSets {
	testmod {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
	}
	test {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modApi "net.fabricmc:fabric-loader:${project.loader_version}"

	testImplementation "org.junit.jupiter:junit-jupiter-api:5.4.2"
	testImplementation "org.junit.jupiter:junit-jupiter-params:5.4.2"
	testImplementation  "org.junit.jupiter:junit-jupiter-engine:5.4.2"

	includeFabricApiModule "fabric-registry-sync-v0"

	testmodCompileClasspath sourceSets.main.output
	modRuntime("net.fabricmc.fabric-api:fabric-api:$fabric_version")
}

def includeFabricApiModule(String moduleName) {
	Object dependency = fabricApi.module(moduleName, project.fabric_version);

	dependencies.modImplementation(dependency);
	dependencies.include(dependency);
}

test { useJUnitPlatform() }

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}
	repositories {
		maven {
			url file("F:\\Development\\Work\\VampireStudiosMaven\\")
		}
	}
}

Properties properties = new Properties()
properties.put("total_version", total_version)

task updateTemplate(type: Copy) {
	group = "template"
	description = "Switches out variables like \$total_version in .template.md files, and copies the results into .md files."
	from(rootDir)
	include("**/*.template.md")
	filesMatching("**/*.template.md") {
		def extensionLength = ".template.md".length()

		name = sourceName.substring(0, sourceName.length() - extensionLength) + ".md"
		expand(properties)
	}
	destinationDir = rootDir
}